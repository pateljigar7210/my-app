{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ProgressDiloag from \"../../components/ProgressDiloag\";\nimport AlertDiload from \"../../components/AlertDiload\";\nimport 'react-native-gesture-handler';\n\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      astronodId = _useState2[0],\n      setAstronodId = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoding = _useState4[0],\n      setIsLoding = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      setMessage = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showMessage = _useState8[0],\n      setShowMessage = _useState8[1];\n\n  useEffect(function () {\n    return setIsLoding(false);\n  }, []);\n\n  var getListApi = function getListApi() {\n    Keyboard.dismiss();\n    setIsLoding(true);\n    fetch('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=QMbqJOKAJdJepZ6XKhV23xl6atyA3N2Y2b8wZGuk').then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var _data$near_earth_obje;\n\n      var data = json;\n\n      if (((_data$near_earth_obje = data.near_earth_objects) == null ? void 0 : _data$near_earth_obje.length) != 0) {\n        var length = data.near_earth_objects ? data.near_earth_objects.length : 0;\n        var randomPosition = Math.floor(Math.random() * length);\n        var randomObj = data != null && data.near_earth_objects ? data.near_earth_objects[randomPosition] : null;\n\n        if (randomObj) {\n          var ojects = randomObj;\n          setAstronodId(ojects.id);\n          getSingleAstronod(ojects.id);\n        }\n      }\n    }).catch(function (e) {\n      setIsLoding(false);\n    }).finally(function () {\n      setIsLoding(false);\n    });\n  };\n\n  var getSingleAstronod = function getSingleAstronod(astronodId) {\n    Keyboard.dismiss();\n    setIsLoding(true);\n    fetch(\"https://api.nasa.gov/neo/rest/v1/neo/\" + astronodId + \"?api_key=QMbqJOKAJdJepZ6XKhV23xl6atyA3N2Y2b8wZGuk\").then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setIsLoding(false);\n      navigation.navigate('Home', {\n        data: json\n      });\n    }).catch(function (e) {\n      setIsLoding(false);\n      setMessage('Wrong Asteroid ID');\n      setShowMessage(true);\n    }).finally(function () {\n      setIsLoding(false);\n    });\n  };\n\n  return React.createElement(SafeAreaView, null, React.createElement(View, {\n    style: styles.loginContainer\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    value: astronodId,\n    onChangeText: setAstronodId,\n    placeholder: \"Enter Asteroid ID\"\n  }), React.createElement(View, {\n    style: styles.buttonContainer\n  }, React.createElement(TouchableOpacity, {\n    style: astronodId == '' ? styles.btnSubmitBlur : styles.btnSubmit,\n    onPress: function onPress() {\n      return getSingleAstronod(astronodId);\n    },\n    disabled: astronodId == '' ? true : false\n  }, React.createElement(Text, {\n    style: styles.btnSubmitText\n  }, \"Submit\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return getListApi();\n    },\n    style: styles.btnSubmit\n  }, React.createElement(Text, {\n    style: styles.btnSubmitText\n  }, \"Random Asteroid\")))), React.createElement(ProgressDiloag, {\n    isViseble: isLoding\n  }), React.createElement(AlertDiload, {\n    message: message,\n    okPress: function okPress() {\n      return setShowMessage(false);\n    },\n    isViseble: showMessage\n  }));\n};\n\nexport default Login;\nvar styles = StyleSheet.create({\n  loginContainer: {\n    margin: 20,\n    backgroundColor: '#FFF',\n    padding: 20,\n    borderRadius: 20\n  },\n  input: {\n    height: 46,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 10\n  },\n  buttonContainer: {\n    flexDirection: 'row'\n  },\n  btnSubmit: {\n    backgroundColor: 'black',\n    padding: 14,\n    alignItems: 'center',\n    margin: 12,\n    height: 46,\n    borderRadius: 10,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.8,\n    shadowRadius: 1\n  },\n  btnSubmitBlur: {\n    backgroundColor: 'gray',\n    padding: 14,\n    alignItems: 'center',\n    margin: 12,\n    height: 46,\n    borderRadius: 10,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.8,\n    shadowRadius: 1\n  },\n  btnSubmitText: {\n    color: '#FFF'\n  }\n});","map":{"version":3,"sources":["/Users/avantikarathod/Documents/jigar/my-app/src/screens/Login/Login.tsx"],"names":["React","useEffect","useState","ProgressDiloag","AlertDiload","Login","navigation","astronodId","setAstronodId","isLoding","setIsLoding","message","setMessage","showMessage","setShowMessage","getListApi","Keyboard","dismiss","fetch","then","response","json","data","near_earth_objects","length","randomPosition","Math","floor","random","randomObj","ojects","id","getSingleAstronod","catch","e","finally","navigate","styles","loginContainer","input","buttonContainer","btnSubmitBlur","btnSubmit","btnSubmitText","StyleSheet","create","margin","backgroundColor","padding","borderRadius","height","borderWidth","flexDirection","alignItems","elevation","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","color"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, SafeAreaView, Keyboard, TouchableOpacity } from 'react-native';\nimport { ListOfAstronod, NearEarthObjectsEntity } from './types/AstronodListType'\nimport { Astronod } from \"./types/Astronod\";\nimport { NavigationProp } from '@react-navigation/native';\nimport ProgressDiloag from '../../components/ProgressDiloag';\nimport AlertDiload from '../../components/AlertDiload';\n\nimport 'react-native-gesture-handler';\ninterface LoginScreenProps {\n    navigation: NavigationProp<any, any>,\n}\n\nconst Login = ({ navigation }: LoginScreenProps) => {\n\n    const [astronodId, setAstronodId] = useState<string>('')\n    const [isLoding, setIsLoding] = useState<boolean>(false)\n    const [message, setMessage] = useState<string>('')\n    const [showMessage, setShowMessage] = useState<boolean>(false)\n\n\n    useEffect(() => {\n        return setIsLoding(false)\n    }, [])\n    const getListApi = () => {\n        Keyboard.dismiss()\n        setIsLoding(true)\n        fetch('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=QMbqJOKAJdJepZ6XKhV23xl6atyA3N2Y2b8wZGuk')\n            .then((response) => response.json())\n            .then((json) => {\n                const data = json as ListOfAstronod;\n                if (data.near_earth_objects?.length != 0) {\n                    var length = data.near_earth_objects ? data.near_earth_objects.length : 0;\n                    const randomPosition = Math.floor(Math.random() * length)\n                    const randomObj = data?.near_earth_objects ? data.near_earth_objects[randomPosition] : null\n                    if (randomObj) {\n                        const ojects = randomObj as NearEarthObjectsEntity;\n                        setAstronodId(ojects.id)\n                        getSingleAstronod(ojects.id)\n                    }\n                }\n            }).catch((e) => {\n                setIsLoding(false)\n            }).finally(() => {\n                setIsLoding(false)\n            })\n\n    }\n    const getSingleAstronod = (astronodId: string) => {\n        Keyboard.dismiss()\n        setIsLoding(true)\n        fetch(`https://api.nasa.gov/neo/rest/v1/neo/${astronodId}?api_key=QMbqJOKAJdJepZ6XKhV23xl6atyA3N2Y2b8wZGuk`)\n            .then((response) => response.json())\n            .then((json) => {\n                setIsLoding(false)\n\n                navigation.navigate('Home', {\n                    data: json\n                })\n\n\n            }).catch((e) => {\n                setIsLoding(false)\n                setMessage('Wrong Asteroid ID')\n                setShowMessage(true)\n            }).finally(() => {\n                setIsLoding(false)\n            })\n\n    }\n\n\n    return (\n        <SafeAreaView>\n\n            <View style={styles.loginContainer}>\n                <TextInput\n                    style={styles.input}\n                    value={astronodId}\n                    onChangeText={setAstronodId}\n                    placeholder='Enter Asteroid ID'\n                />\n\n                <View style={styles.buttonContainer}>\n\n                    <TouchableOpacity\n                        style={astronodId == '' ? styles.btnSubmitBlur : styles.btnSubmit}\n                        onPress={() => getSingleAstronod(astronodId)}\n                        disabled={astronodId == '' ? true : false}\n                    >\n                        <Text style={styles.btnSubmitText} >Submit</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        onPress={() => getListApi()}\n                        style={styles.btnSubmit}>\n                        <Text style={styles.btnSubmitText} >Random Asteroid</Text>\n                    </TouchableOpacity>\n                </View>\n\n\n            </View>\n            <ProgressDiloag\n                isViseble={isLoding}\n            />\n            <AlertDiload\n                message={message}\n                okPress={() => setShowMessage(false)}\n                isViseble={showMessage}\n            />\n        </SafeAreaView>\n    );\n}\n\nexport default Login;\n\n\nconst styles = StyleSheet.create({\n    loginContainer: {\n        margin: 20,\n        backgroundColor: '#FFF',\n        padding: 20,\n        borderRadius: 20,\n\n    },\n    input: {\n        height: 46,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n        borderRadius: 10,\n    },\n    buttonContainer: {\n        flexDirection: 'row'\n    },\n    btnSubmit: {\n        backgroundColor: 'black',\n        padding: 14,\n        alignItems: 'center',\n        margin: 12,\n        height: 46,\n        borderRadius: 10,\n        elevation: 4,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 1 },\n        shadowOpacity: 0.8,\n        shadowRadius: 1,\n    },\n\n    btnSubmitBlur: {\n        backgroundColor: 'gray',\n        padding: 14,\n        alignItems: 'center',\n        margin: 12,\n        height: 46,\n        borderRadius: 10,\n        elevation: 4,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 1 },\n        shadowOpacity: 0.8,\n        shadowRadius: 1,\n    },\n    btnSubmitText: {\n        color: '#FFF',\n\n    },\n});\n"]},"metadata":{},"sourceType":"module"}